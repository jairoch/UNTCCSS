@if (!string.IsNullOrEmpty(DisplayMessage))
{
    var statusMessageClass = "alert-info";

    if (DisplayMessage.ToLower().StartsWith("error"))
        statusMessageClass = "alert-danger";
    else if (DisplayMessage.ToLower().StartsWith("success"))
        statusMessageClass = "alert-success"; 
    else if (DisplayMessage.ToLower().StartsWith("warning"))
        statusMessageClass = "alert-warning";

    // Obtener solo el mensaje después de los dos puntos
    var mensajeMostrado = DisplayMessage.Contains(":")
        ? DisplayMessage.Split(new[] { ':' }, 2)[1].Trim()
        : DisplayMessage;

    <div class="alert @statusMessageClass roboto-regular p-2 m-0" role="alert">
        @mensajeMostrado
    </div>
}

@code {
    private string messageFromCookie;

    [Parameter] public string Message { get; set; }
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; }

    private string DisplayMessage => Message ?? messageFromCookie;

    protected override void OnInitialized()
    {
        try
        {
            // Solo intentar acceder a HttpContext si está disponible
            var httpContext = HttpContextAccessor?.HttpContext;
            if (httpContext != null)
            {
                messageFromCookie = httpContext.Request.Cookies["StatusMessage"];
                httpContext.Response.Cookies.Delete("StatusMessage");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en StatusMessage: {ex.Message}");
        }
    }
}
