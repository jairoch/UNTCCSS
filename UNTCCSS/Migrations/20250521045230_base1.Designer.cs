// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UNTCCSS.Data;

#nullable disable

namespace UNTCCSS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521045230_base1")]
    partial class base1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UNTCCSS.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnOrder(4);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(2);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(3);

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "6cda19c4-1f1e-4a54-9b9d-9e445a67b4e3",
                            Descripcion = "Rol con acceso total al sistema",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = true
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "7f5a19c4-1f1e-4a54-9b9d-9e445a67b4e3",
                            Descripcion = "Rol con permisos de administración de usuarios dentro de su empresa",
                            Name = "Empresa",
                            NormalizedName = "EMPRESA",
                            Status = true
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "d7a45bd1-edfd-444f-bb3f-dd61eef2eb8b",
                            Descripcion = "Rol con permisos para registrar certificados",
                            Name = "Registrador",
                            NormalizedName = "REGISTRADOR",
                            Status = true
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "3f2c9b1d-9c4f-4e5b-b2c8-2e1d2a9c3d45",
                            Descripcion = "Rol con permisos mínimos del sistema",
                            Name = "Predeterminado",
                            NormalizedName = "PREDETERMINADO",
                            Status = true
                        });
                });

            modelBuilder.Entity("UNTCCSS.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PerfilId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0989809e-e4ee-4852-9abb-6d12abf5e781",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad877341-f227-4a43-9920-11bb53273269",
                            Email = "jairochingo@outlook.com",
                            EmailConfirmed = true,
                            IdEmpresa = 1,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAIROCHINGO@OUTLOOK.COM",
                            NormalizedUserName = "JAIRO",
                            PasswordHash = "AQAAAAIAAYagAAAAENjRHZEDEydSd2vpCMAkG9OUib8ydH98lT4rf1bziLvYOOqQ9oCP6C4BBp7SCALRKQ==",
                            PerfilId = 1,
                            PhoneNumber = "967607828",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cda19c4-1f1e-4a54-9b9d-9e445a67b4e3",
                            TwoFactorEnabled = false,
                            UserName = "Jairo"
                        });
                });

            modelBuilder.Entity("UNTCCSS.Data.ApplicationUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0989809e-e4ee-4852-9abb-6d12abf5e781",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("UNTCCSS.Models.Certificado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlumnoId")
                        .HasColumnType("integer");

                    b.Property<string>("Archivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CursoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdResolucion")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PromedioFinal")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RegUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Registro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("CursoId");

                    b.HasIndex("IdResolucion");

                    b.HasIndex("UserId");

                    b.ToTable("Certificado");
                });

            modelBuilder.Entity("UNTCCSS.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdTemario")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdTemario");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("UNTCCSS.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RUC")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Empresa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle Ficticia 123",
                            Nombre = "Mas Saben Perú",
                            RUC = "12345678901",
                            RazonSocial = "Empresa Demo",
                            Telefono = "987654321"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Av. Tecnológica 456",
                            Nombre = "Tech Solutions",
                            RUC = "98765432109",
                            RazonSocial = "Tech Solutions SAC",
                            Telefono = "912345678"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Jr. Comercio 789",
                            Nombre = "Comercial Andina",
                            RUC = "10293847561",
                            RazonSocial = "Comercial Andina EIRL",
                            Telefono = "923456789"
                        },
                        new
                        {
                            Id = 4,
                            Direccion = "Calle Innovación 321",
                            Nombre = "Innova Corp",
                            RUC = "56473829104",
                            RazonSocial = "Innovaciones Empresariales SAC",
                            Telefono = "934567890"
                        },
                        new
                        {
                            Id = 5,
                            Direccion = "Av. Aduanas 654",
                            Nombre = "Global Import",
                            RUC = "37482910562",
                            RazonSocial = "Global Importaciones SRL",
                            Telefono = "945678901"
                        },
                        new
                        {
                            Id = 6,
                            Direccion = "Pasaje Verde 987",
                            Nombre = "EcoVerde",
                            RUC = "91827364509",
                            RazonSocial = "Soluciones Ecológicas EIRL",
                            Telefono = "956789012"
                        });
                });

            modelBuilder.Entity("UNTCCSS.Models.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("AtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("UNTCCSS.Models.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagenPerfil")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Telefono")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Perfil");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Chingo",
                            Direccion = "Los Tulipanes 465",
                            Dni = "12345678",
                            Email = "jairochingo@outlook.com",
                            ImagenPerfil = "imagen/png",
                            Nombres = "Jairo",
                            Telefono = 967607828
                        });
                });

            modelBuilder.Entity("UNTCCSS.Models.Permisos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Permisos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Permite gestionar usuarios dentro de la empresa actual, acciones como agregar nuevo, eliminar, suspender y asignar roles.",
                            Name = "GestionarUsuarios",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Permite crear, editar y eliminar roles y sus permisos.",
                            Name = "GestionarRoles",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Permite ver certificados emitidos por la empresa a la que pertenece el usuario.",
                            Name = "VerCertificados",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Permite ver los usuarios de la misma empresa del usuario actual.",
                            Name = "VerUsuarios",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Permite ver la información de las empresas registradas.",
                            Name = "VerEmpresas",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Permite acceder a la configuración del sistema.",
                            Name = "VerConfiguracion",
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Permite a un administrador ver certificados emitidos de todas las empresas.",
                            Name = "VerCertificadosAdmin",
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Permite a un administrador ver todos los usuarios del sistema.",
                            Name = "VerUsuariosAdmin",
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Permite crear certificados para los estudiantes.",
                            Name = "CrearCertificados",
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Permite crear nuevos usuarios dentro de la empresa a la que se le ha asignado.",
                            Name = "CrearUsuarios",
                            Status = true
                        },
                        new
                        {
                            Id = 11,
                            Descripcion = "Permite crear nuevos usuarios dentro de cualquier empresa.",
                            Name = "CrearUsuariosAdmin",
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            Descripcion = "Permite editar certificados previamente emitidos.",
                            Name = "EditarCertificados",
                            Status = true
                        },
                        new
                        {
                            Id = 13,
                            Descripcion = "Permite eliminar certificados emitidos.",
                            Name = "EliminarCertificados",
                            Status = true
                        },
                        new
                        {
                            Id = 14,
                            Descripcion = "Permite eliminar a los estudiantes y sus certificados.",
                            Name = "EliminarEstudiantes",
                            Status = true
                        },
                        new
                        {
                            Id = 15,
                            Descripcion = "Permite activar la consulta de los certificados expedidos a los clientes.",
                            Name = "ActivarVerificación",
                            Status = true
                        },
                        new
                        {
                            Id = 16,
                            Descripcion = "Permite pausar la consulta de los certificados expedidos a los clientes hasta que se vuelva a activar manualmente.",
                            Name = "PausarVerificación",
                            Status = true
                        });
                });

            modelBuilder.Entity("UNTCCSS.Models.Resolucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Documentacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Resolucion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AtCreated = new DateTime(2025, 2, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Documentacion = "",
                            Name = "N° 0001-A-2024-DUPG/CC.SS",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            AtCreated = new DateTime(2025, 2, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Documentacion = "",
                            Name = "N° 0001-A-2022-DUPG/CC.SS",
                            Status = true
                        });
                });

            modelBuilder.Entity("UNTCCSS.Models.RolPermisos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermisosId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PermisosId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolPermisos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermisosId = 2,
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 2,
                            PermisosId = 5,
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 3,
                            PermisosId = 6,
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            PermisosId = 7,
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            PermisosId = 8,
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            PermisosId = 11,
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            PermisosId = 3,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 8,
                            PermisosId = 4,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 9,
                            PermisosId = 9,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 10,
                            PermisosId = 10,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 11,
                            PermisosId = 12,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 12,
                            PermisosId = 13,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 13,
                            PermisosId = 14,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 14,
                            PermisosId = 15,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 15,
                            PermisosId = 16,
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 16,
                            PermisosId = 3,
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 17,
                            PermisosId = 9,
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 18,
                            PermisosId = 12,
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("UNTCCSS.Models.Temario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Temario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("UNTCCSS.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UNTCCSS.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UNTCCSS.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UNTCCSS.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UNTCCSS.Data.ApplicationUser", b =>
                {
                    b.HasOne("UNTCCSS.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa");

                    b.HasOne("UNTCCSS.Models.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("UNTCCSS.Data.ApplicationUserRoles", b =>
                {
                    b.HasOne("UNTCCSS.Data.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UNTCCSS.Data.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UNTCCSS.Models.Certificado", b =>
                {
                    b.HasOne("UNTCCSS.Models.Estudiante", "Alumno")
                        .WithMany("Certificados")
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UNTCCSS.Models.Curso", "Curso")
                        .WithMany("Certificados")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UNTCCSS.Models.Resolucion", "Resolucion")
                        .WithMany("Certificados")
                        .HasForeignKey("IdResolucion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UNTCCSS.Data.ApplicationUser", "Usuario")
                        .WithMany("Certificados")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Curso");

                    b.Navigation("Resolucion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("UNTCCSS.Models.Curso", b =>
                {
                    b.HasOne("UNTCCSS.Models.Temario", "Temario")
                        .WithMany()
                        .HasForeignKey("IdTemario");

                    b.Navigation("Temario");
                });

            modelBuilder.Entity("UNTCCSS.Models.Estudiante", b =>
                {
                    b.HasOne("UNTCCSS.Data.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("UNTCCSS.Models.RolPermisos", b =>
                {
                    b.HasOne("UNTCCSS.Models.Permisos", "Permisos")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermisosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UNTCCSS.Data.ApplicationRole", "Role")
                        .WithMany("RolPermisos")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permisos");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UNTCCSS.Data.ApplicationRole", b =>
                {
                    b.Navigation("RolPermisos");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UNTCCSS.Data.ApplicationUser", b =>
                {
                    b.Navigation("Certificados");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UNTCCSS.Models.Curso", b =>
                {
                    b.Navigation("Certificados");
                });

            modelBuilder.Entity("UNTCCSS.Models.Estudiante", b =>
                {
                    b.Navigation("Certificados");
                });

            modelBuilder.Entity("UNTCCSS.Models.Permisos", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("UNTCCSS.Models.Resolucion", b =>
                {
                    b.Navigation("Certificados");
                });
#pragma warning restore 612, 618
        }
    }
}
